name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  # Set the AWS region
  AWS_REGION: eu-north-1
  # Define your custom name
  MY_NAME: krystian-nowaczyk
  # Construct the ECS cluster name using the custom name
  ECS_CLUSTER: ${{ env.MY_NAME }}-fargate-cluster
  # Path to your Amazon ECS task definition
  ECS_TASK_DEFINITION: .aws/task-definition.json
  # Name of the container in the task definition
  CONTAINER_NAME: my-container
  # Use the custom name as the ECS service name
  ECS_SERVICE: ${{ env.MY_NAME }}

permissions:
  contents: read

jobs:
  # Build job for running tests and code linting
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Specify the Python versions you want to test
        python-version: [3.7, 3.8, 3.9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest

      - name: Run code linting
        run: pylint src

  # Lint job for code linting only
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      # Cache the pip dependencies for faster builds
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }} # Generate a cache key based on the requirements.txt file
          restore-keys: |
            ${{ runner.os }}-pip- # Restore the cache using the cache key prefix

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run code linting
        run: pylint src

  # Deploy job for deploying to Amazon ECS
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: [lint, build]  # Depend on lint and build jobs

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
